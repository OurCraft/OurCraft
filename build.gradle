import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

def filteredSourceDir = file("${buildDir}/filtered") 
def versionValue = 'InDev 0.1'
def mainClass = "org.craft.launch.OurCraftLauncher"

    apply plugin: 'java'
    sourceCompatibility = 1.6
    archivesBaseName = 'OurCraft'
    version = versionValue

    //IDE
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    repositories {
        mavenCentral()
    }

    //Tasks
    task processVersion(type: Copy) {
        from sourceSets.main.java 
        into filteredSourceDir 
        // Substitute property references in files
        // Use some of the filters provided by Ant
        filter(FixCrLfFilter)
        filter(ReplaceTokens, tokens: ['version': versionValue])
        // Use a closure to filter each line
        filter { String line ->
            ("$line".replaceAll('"OurCraft:BuildNumber"', '"'+versionValue+'"'))
        }
    }

    sourceSets { 
        // This source set will contain all sources that we filter 
        filtered { 
            java { 
                srcDirs = [filteredSourceDir] 
            } 
        } 
    } 

    //force UTF-8 to the compileJava task
    compileJava.options.encoding = 'UTF-8'

    // tell the compileJava task to compile the filtered source 
    compileJava.source = sourceSets.filtered.java 

    // Add dependencies processVersion to compileJava task
    compileJava.dependsOn processVersion 

    dependencies {
        compile fileTree(dir: 'libs', include: '*.jar')
        compile 'org.lwjgl.lwjgl:lwjgl_util:2.9.1'
        compile 'org.lwjgl.lwjgl:lwjgl:2.9.1'
        
        compile 'io.netty:netty-all:4.0.23.Final'

        compile 'com.google.guava:guava:18.0'
        compile 'com.google.code.gson:gson:2.3'

        compile 'org.reflections:reflections-maven:0.9.9-RC2'
        compile 'org.javassist:javassist:3.18.2-GA'

        compile project(':SpongeAPI')
    }

    jar {
    manifest {
        attributes 'Implementation-Title': 'OurCraft', 'Implementation-Version': version, 'Main-Class': mainClass
    }
}

task runClient(type: JavaExec, dependsOn: 'classes') {
    main = mainClass
    classpath = configurations.runtime
    classpath += sourceSets.main.runtimeClasspath
    standardInput = System.in
}